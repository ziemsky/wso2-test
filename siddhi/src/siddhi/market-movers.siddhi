@App:name("market-movers")


@source(
  type="kafka",
  bootstrap.servers="localhost:9092",
  topic.list="bets",
  partition.no.list="0",
  group.id="market-movers_bets",
  threading.option="single.thread",
  @map(
    type = 'json'
))
define stream Bets(selection string, user string);


@source(
  type="kafka",
  bootstrap.servers="localhost:9092",
  topic.list="marketPriceChanges",
  partition.no.list="0",
  group.id="market-movers_price-changes",
  threading.option="single.thread",
  @map(
    type = 'json'
))
define stream PriceChanges(selection string, odds int);


@sink(
  type="kafka",
  bootstrap.servers="localhost:9092",
  topic="alerts",
  is.binary.message='FALSE',
  @map(type='json')
)
define stream Alerts(user string, selection string);


define stream PriceChangesAboveThreshold(selection string, odds int);


-- todo group price changes by market/selection (partition?)
-- todo group bets by customer
-- SEE https://docs.wso2.com/display/SP420/Analyzing+Trends

@info(name='PriceChangesAboveThreshold')
from every previousChange=PriceChanges,
           latestChange=PriceChanges[odds > (previousChange.odds + 5)]
select previousChange.selection, previousChange.odds
insert into PriceChangesAboveThreshold;

@info(name='ShrewdBets')
    from PriceChangesAboveThreshold#window.length(1) as priceChange unidirectional
    join Bets#window.length(10) as bet
      on priceChange.selection == bet.selection
  select bet.user, bet.selection
group by priceChange.selection
  insert into Alerts;
